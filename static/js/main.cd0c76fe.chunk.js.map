{"version":3,"sources":["logo.svg","components/TodoItem.js","components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItem","props","useState","isChecked","setChecked","style","textDecoration","checked","onChange","event","target","type","todoElementProp","title","onClick","removeTodoProp","indexProp","stylingForButton","backgroundColor","border","color","cursor","fontSize","Todos","todoProps","map","todoElement","index","key","id","removeTodoPropFromAppJs","App","isCompleted","todos","setTodos","className","newTodos","splice","src","logo","alt","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qHAAAA,EAAOC,QAAU,IAA0B,kC,wKCG5B,SAASC,EAASC,GAAQ,IAAD,EACJC,oBAAS,GADL,mBAC7BC,EAD6B,KAClBC,EADkB,KAUpC,OACI,wBAAIC,MARG,CACHC,eAAgBH,GAAa,iBAQ7B,2BAAOI,QAASJ,EAChBK,SANR,SAA8BC,GAC1BL,EAAWK,EAAMC,OAAOH,UAMpBI,KAAK,aACJV,EAAMW,gBAAgBC,MAJ3B,IAImC,GAC/B,4BACAC,QAAY,kBACRb,EAAMc,eAAed,EAAMe,YAE/BX,MAAOY,GAJP,mBASZ,IAAMA,EAAmB,CACrBC,gBAAiB,UACjBC,OAAQ,OACRC,MAAO,QACPC,OAAQ,UACRC,SAAU,QC7BC,SAASC,EAAMtB,GAC1B,OAAOA,EAAMuB,UAAUC,KAAK,SAACC,EAAaC,GAAd,OACxB,kBAAC3B,EAAD,CAAU4B,IAAKF,EAAYG,GAC3Bb,UAAWW,EACXZ,eAAgBd,EAAM6B,wBACtBlB,gBAAiBc,O,0BCyCVK,MA7Cf,WAAgB,IAAD,EACa7B,mBAAS,CACjC,CACE2B,GAAI,EACJG,aAAa,EACbnB,MAAO,yBAET,CACEgB,GAAI,EACJG,aAAa,EACbnB,MAAO,uBAET,CACEgB,GAAI,EACJG,aAAa,EACbnB,MAAO,6CAfE,mBACNoB,EADM,KACCC,EADD,KAuBb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACZ,EAAD,CAAQO,wBARK,SAAAH,GACjB,IAAMS,EAAQ,YAAOH,GACrBG,EAASC,OAAOV,EAAO,GACvBO,EAASE,IAMGZ,UAAWS,IACnB,yBAAKK,IAAKC,IAAMJ,UAAU,WAAWK,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEL,UAAU,WACVM,KAAK,sBACL/B,OAAO,SACPgC,IAAI,uBAJN,kBCzBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cd0c76fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import PropTypes from 'prop-types';\r\nimport React, { useState } from 'react';\r\n\r\nexport default function TodoItem(props) {\r\n    const [isChecked, setChecked] = useState(false);\r\n    const getStyle = () => {\r\n        return {\r\n            textDecoration: isChecked && 'line-through'\r\n        }\r\n    }\r\n    function handleCheckboxChange(event) {\r\n        setChecked(event.target.checked);\r\n    }\r\n    return (\r\n        <h3 style={getStyle()}>\r\n            <input checked={isChecked}\r\n            onChange={handleCheckboxChange}\r\n            type='checkbox' />\r\n            {props.todoElementProp.title} {''}\r\n            <button\r\n            onClick={   ()  =>\r\n                props.removeTodoProp(props.indexProp)\r\n            }\r\n            style={stylingForButton}> ðŸ—‘ </button>\r\n        </h3>\r\n    );\r\n}\r\n\r\nconst stylingForButton = {\r\n    backgroundColor: '#282c34',\r\n    border: 'none',\r\n    color: 'white',\r\n    cursor: 'pointer',\r\n    fontSize: '100%'\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    indexProp: PropTypes.number.isRequired,\r\n    removeTodoProp: PropTypes.func.isRequired,\r\n    todoElementProp: PropTypes.object.isRequired\r\n}","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nexport default function Todos(props) {\r\n    return props.todoProps.map( (todoElement, index) =>  (\r\n        <TodoItem key={todoElement.id}\r\n        indexProp={index}\r\n        removeTodoProp={props.removeTodoPropFromAppJs}\r\n        todoElementProp={todoElement} />\r\n    ));\r\n}\r\n\r\nTodos.propTypes = {\r\n    removeTodoPropFromAppJs: PropTypes.func.isRequired,\r\n    todoProps: PropTypes.array.isRequired\r\n}","import React, { useState } from 'react';\nimport Todos from './components/Todos';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [todos, setTodos] = useState([\n    {\n      id: 1,\n      isCompleted: false,\n      title: 'Fly to Cathedral Cove'\n    },\n    {\n      id: 2,\n      isCompleted: false,\n      title: 'Swim to Switzerland'\n    },\n    {\n      id: 3,\n      isCompleted: false,\n      title: 'Travel to Japan from California by foot'\n    }\n  ]);\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Todos  removeTodoPropFromAppJs={removeTodo}\n                todoProps={todos}/>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}