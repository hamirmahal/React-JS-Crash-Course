{"version":3,"sources":["publicdomainclock.png","components/pages/About.js","components/AddTodo.js","components/layout/Header.js","components/TodoItem.js","components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","About","href","rel","target","AddTodo","addTodoMethodProp","useState","newTodo","setNewTodo","onSubmit","buttonSubmitEvent","preventDefault","placeholder","type","onChange","newTodoEvent","value","Header","style","padding","homeStyle","to","fontSize","TodoItem","props","todoElementProp","completed","title","textDecoration","checked","change","indexProp","onClick","removeTodoProp","stylingForButton","background","border","color","cursor","Todos","todoProps","map","todoElement","index","changeTodo","key","removeTodoPropFromAppJs","App","todos","setTodos","addTodo","fetch","method","body","JSON","stringify","userId","headers","then","r","json","j","changeTodoStatus","i","newTodos","removeTodo","response","splice","useEffect","className","src","clock","alt","exact","path","render","Fragment","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2647c11a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/publicdomainclock.15da84e6.png\";","import React from 'react';\r\n\r\nexport default function About() {\r\n    return (\r\n        <p> This is a Todo list application Hamir created\r\n        with the help of <a href=\r\n        'https://www.youtube.com/watch?v=sBws8MSXN7A'\r\n        rel='noreferrer noopener' target='_blank'>\r\n        Traversy Media's React JS Crash Course</a>.\r\n        <br /> <br /> To assist with avoiding the use of\r\n        class-based components, and using mostly\r\n        stateful functional components, watching <a href=\r\n        'https://www.youtube.com/watch?v=mxK8b99iJTg'\r\n        rel='noreferrer noopener' target='_blank'>\r\n        \"Introducing React Hooks\"</a>, also by Traversy\r\n        Media, was helpful as well. <br /> <br />\r\n        I downloaded the clock image from <a href=\r\n    'http://www.clker.com/clipart-round-white-clock.html'\r\n        rel='noreferrer noopener' target='_blank'> a site\r\n        that offers free clipart</a>; I give my thanks\r\n        to them.\r\n        <br /> <br /> Hope you find this application\r\n        useful. Thanks for checking this out! </p>\r\n    );\r\n}","import PropTypes from 'prop-types';\r\nimport React, { useState } from 'react';\r\n\r\nexport default function AddTodo( { addTodoMethodProp } ) {\r\n    const [newTodo, setNewTodo] = useState('');\r\n    function handleNewTodo(newTodoEvent) {\r\n        setNewTodo(newTodoEvent.target.value);\r\n    }\r\n    function handleSubmit(buttonSubmitEvent) {\r\n        buttonSubmitEvent.preventDefault();\r\n        addTodoMethodProp(newTodo);\r\n        setNewTodo('');\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input placeholder='I have to...' type='text'\r\n            onChange={handleNewTodo} value={newTodo} />\r\n            <input type='submit' value='+' />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddTodo.propTypes = {\r\n    addTodoMethodProp: PropTypes.func.isRequired\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <h1 style   =   {   {   padding:    '10px'  }   }>\r\n            TodoList from\r\n            Traversy Media React JS Crash Course <br />\r\n            <Link style={homeStyle} to='/'>Home</Link>\r\n            {''} | {''}\r\n            <Link style={homeStyle} to='/about'>About</Link>\r\n        </h1>\r\n    );\r\n}\r\n\r\nconst homeStyle = {\r\n    fontSize: '75%',\r\n}","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nexport default function TodoItem(props) {\r\n    const { completed, title } = props.todoElementProp;\r\n    const getStyle = () => {\r\n        return {\r\n            textDecoration: completed && 'line-through'\r\n        }\r\n    }\r\n    return (\r\n        <h3 style={getStyle()}>\r\n            <label>\r\n                <input \r\n                    checked =   {   completed   }\r\n                    onChange=   {   ()  =>  \r\n                        props.change(props.indexProp) }\r\n                    type='checkbox' />  {title} {''}\r\n            </label>\r\n            <button onClick =   {   ()  =>\r\n            props.removeTodoProp(props.indexProp)   }\r\n            style={stylingForButton}>   ðŸ—‘  </button>\r\n        </h3>\r\n    );\r\n}\r\n\r\nconst stylingForButton = {\r\n    background: 'none',\r\n    border: 'none',\r\n    color: 'white',\r\n    cursor: 'pointer',\r\n    fontSize: '100%'\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    change: PropTypes.func.isRequired,\r\n    indexProp: PropTypes.number.isRequired,\r\n    removeTodoProp: PropTypes.func.isRequired,\r\n    todoElementProp: PropTypes.object.isRequired\r\n}","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nexport default function Todos(props) {\r\n    return props.todoProps.map( (todoElement, index) =>  (\r\n        <TodoItem change = {props.changeTodo} key={index}\r\n        indexProp={index}\r\n        removeTodoProp={props.removeTodoPropFromAppJs}\r\n        todoElementProp={todoElement} />\r\n    ));\r\n}\r\n\r\nTodos.propTypes = {\r\n    changeTodo: PropTypes.func.isRequired,\r\n    removeTodoPropFromAppJs: PropTypes.func.isRequired,\r\n    todoProps: PropTypes.array.isRequired\r\n}","import About from './components/pages/About';\r\nimport AddTodo from './components/AddTodo';\r\nimport Header from './components/layout/Header';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Todos from './components/Todos';\r\nimport clock from './publicdomainclock.png';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = useState([]);\r\n  const addTodo = title => {\r\n    fetch('https://jsonplaceholder.typicode.com/todos',\r\n      { method: 'POST'  ,\r\n        body: JSON.stringify( {\r\n          userId: 1, title, completed: false  } ) ,\r\n        headers: {  \"Content-type\":\r\n          \"application/json; charset=UTF-8\"}  }\r\n    ).then(r=>r.json()).then(j=>setTodos([...todos,j]))\r\n  }\r\n  const changeTodoStatus = i => {\r\n    const newTodos = [...todos];\r\n    newTodos[i].completed = !newTodos[i].completed;\r\n    setTodos(newTodos);\r\n  }\r\n  const removeTodo = i => {\r\n    fetch(\r\n    `https://jsonplaceholder.typicode.com/todos/${i}`, \r\n    { method: 'DELETE'  } ).then(response =>  {\r\n      const newTodos = [...todos];\r\n      newTodos.splice(i, 1);\r\n      setTodos(newTodos);                     } );\r\n  }\r\n  useEffect(() => {\r\n    fetch(\r\n  'https://jsonplaceholder.typicode.com/todos?_limit=9'\r\n    ).then(r => r.json()).then(json => setTodos(json));\r\n  }, [])\r\n  return (\r\n    <HashRouter>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Header />\r\n          <img src={clock} className=\"App-logo\"\r\n          alt=\"clockface sans numbers\" /> <br />\r\n          <Route exact path='/' render={props => (\r\n            <React.Fragment>\r\n              <AddTodo addTodoMethodProp = {addTodo} />\r\n              <br />\r\n              <Todos changeTodo = {changeTodoStatus}\r\n              removeTodoPropFromAppJs = {removeTodo}\r\n              todoProps={todos}/>\r\n            </React.Fragment>\r\n          )} />\r\n          <Route component={About} path='/about' />\r\n          <a\r\n            className=\"App-link\"\r\n            href=\r\n\"https://github.com/hamirmahal/React-JS-Crash-Course\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n          View the source code on Hamir Mahal's GitHub\r\n          </a>\r\n        </header>\r\n      </div>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}